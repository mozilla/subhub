---
service:
  name: fxa

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline
provider:
  name: aws
  runtime: python3.7
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  stackName: ${self:custom.prefix}-stack
  apiName: ${self:custom.prefix}-apigw
  deploymentPrefix: ${self:custom.prefix}
  endpointType: regional
  logRetentionInDays: 90
  logs:
    restApi: true
  memorySize: 256
  timeout: 10
  tracing: true
  snsaccount: ${file(./accounts.yml):fxa.${self:provider.stage}}
  environment:
    STAGE: ${self:provider.stage}
    APP_DEPENV: ${env:APP_DEPENV}
    APP_PROJNAME: ${env:APP_PROJNAME}
    APP_BRANCH: ${env:APP_BRANCH}
    APP_REVISION: ${env:APP_REVISION}
    APP_VERSION: ${env:APP_VERSION}
    APP_REMOTE_ORIGIN_URL: ${env:APP_REMOTE_ORIGIN_URL}
    APP_LOG_LEVEL: ${env:APP_LOG_LEVEL}
    USER_TABLE:
      Ref: 'Users'
    EVENT_TABLE:
      Ref: 'Events'
  tags:
    cost-center: 1440
    project-name: subhub
    project-desc: payment subscription REST api for customers
    project-email: subhub@mozilla.com
    deploy-env: ${env:APP_DEPENV}
    deploy-method: serverless
    sources: https://github.com/mozilla/subhub
    urls: prod.fxa.mozilla-subhub.app/v1
    keywords: subhub:subscriptions:flask:serverless:swagger
    branch: ${env:APP_BRANCH}
    revision: ${env:APP_REVISION}
    version: ${env:APP_VERSION}
  stackTags:
    service: ${self:service}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:DescribeTable'
        - 'dynamodb:CreateTable'
      Resource:
        - { 'Fn::GetAtt': ['Users', 'Arn'] }
        - { 'Fn::GetAtt': ['Events', 'Arn'] }
    - Effect: Allow
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource:
        - 'Fn::Join': [':', ['arn:aws:secretsmanager', Ref: AWS::Region, Ref: AWS::AccountId, 'secret:${self:provider.stage}/*']]
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join': [':', ['arn:aws:logs', Ref: AWS::Region, Ref: AWS::AccountId, 'log-group:/aws/lambda/*:*:*']]
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource:
        - 'Fn::Join': [':', ['arn:aws:kms', Ref: AWS::Region, Ref: AWS::AccountId, 'alias/*']]
        - 'Fn::Join': [':', ['arn:aws:kms', Ref: AWS::Region, Ref: AWS::AccountId, 'key/*']]
    - Effect: Allow
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - 'Fn::Join': [':', ['arn:aws:sns', Ref: AWS::Region, Ref: AWS::AccountId, '${self:provider.stage}-fxa-event-data']]
  resourcePolicy: ${self:custom.resourcePolicies.${self:custom.access.${self:provider.stage}}}

package:
  exclude:
    - '**/*'
  include:
    - 'handler.py'
    - 'subhub/**'

custom:
  prefix: ${self:provider.stage}-${self:service.name}
  subdomain: ${self:provider.stage}.${self:service.name}
  pythonRequirements:
    dockerizePip: 'non-linux'
    fileName: subhub/requirements.txt
  git-repo: https://github.com/mozilla/subhub
  dynamodb:
    start:
      migrate: true
  customDomain:
    domainName: ${self:custom.subdomain}.mozilla-subhub.app
    certificateName: ${self:custom.subdomain}.mozilla-subhub.app
    basePath: 'v1'
    stage: ${self:provider.stage}
    createRoute53Record: true
    hostedZoneId: Z2KY0AWCLX3H6L
    endpointType: regional
  access:
    prod: restricted
    stage: restricted
    qa: restricted
    dev: unfettered
  resourcePolicies:
    unfettered:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*
    restricted:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/version
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/support/*
        Condition:
          IpAddress:
            aws:SourceIp: ${file(./whitelist.yml):support.${self:provider.stage}}
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/customer/*
          - execute-api:/*/*/plans
        Condition:
          IpAddress:
            aws:SourceIp: ${file(./whitelist.yml):payments.${self:provider.stage}}
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/webhooks
        Condition:
          IpAddress:
            aws:SourceIp: ${file(./whitelist.yml):webhook}

functions:
  subhub:
    name: ${self:custom.prefix}-function
    description: >
      subhub service for handling subscription services interactions
    handler: handler.handle
    timeout: 30
    events:
      - http:
          method: ANY
          path: /
          cors: true
      - http:
          method: ANY
          path: '{proxy+}'
          cors: true

resources:
  Resources:
    SubHubSNS:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: FxA ${self:provider.stage} Event Data
        TopicName: ${self:provider.stage}-fxa-event-data
    SubHubTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Id: AWSAccountTopicAccess
          Version: '2008-10-17'
          Statement:
            - Sid: FxAStageAccess
              Effect: Allow
              Principal:
                AWS: arn:aws:iam::${self:provider.snsaccount}:root
              Action:
                - SNS:Subscribe
                - SNS:Receive
                - SNS:GetTopicAttributes
              Resource: arn:aws:sns:us-west-2:903937621340:${self:provider.stage}-fxa-event-data
        Topics:
          - Ref: SubHubSNS
    Users:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    Events:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: eventId
            AttributeType: S
        KeySchema:
          -
            AttributeName: eventId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
