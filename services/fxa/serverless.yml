---
service:
  name: fxa

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline
provider:
  name: aws
  runtime: python3.7
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 10
  tracing: true
  stackTags:
    service: ${self:service}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:DescribeTable'
        - 'dynamodb:CreateTable'
      Resource:
        - { 'Fn::GetAtt': ['Users', 'Arn'] }
        - { 'Fn::GetAtt': ['Events', 'Arn'] }
    - Effect: Allow
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource:
        - 'Fn::Join': [':', ['arn:aws:secretsmanager', Ref: AWS::Region, Ref: AWS::AccountId, 'secret:${self:provider.stage}/*']]
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join': [':', ['arn:aws:logs', Ref: AWS::Region, Ref: AWS::AccountId, 'log-group:/aws/lambda/*:*:*']]
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource:
        - 'Fn::Join': [':', ['arn:aws:kms', Ref: AWS::Region, Ref: AWS::AccountId, 'alias/*']]
        - 'Fn::Join': [':', ['arn:aws:kms', Ref: AWS::Region, Ref: AWS::AccountId, 'key/*']]
    - Effect: Allow
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'

package:
  exclude:
    - '**/*'
  include:
    - 'handler.py'
    - 'subhub/**'

custom:
  prefix: ${self:provider.stage}-${self:service.name}
  subdomain: ${self:provider.stage}.${self:service.name}
  pythonRequirements:
    dockerizePip: 'non-linux'
    fileName: subhub/requirements.txt
  git-repo: https://github.com/mozilla/subhub
  dynamodb:
    start:
      migrate: true
  customDomain:
    domainName: ${self:custom.subdomain}.mozilla-subhub.app
    certificateName: ${self:custom.subdomain}.mozilla-subhub.app
    basePath: 'v1'
    stage: ${self:provider.stage}
    createRoute53Record: true
    hostedZoneId: Z2KY0AWCLX3H6L
    endpointType: regional

functions:
  subhub:
    name: ${self:custom.prefix}-function
    description: >
      subhub service for handling subscription services interactions
    handler: handler.handle
    timeout: 30
    events:
      - http:
          method: ANY
          path: /
          cors: true
      - http:
          method: ANY
          path: '{proxy+}'
          cors: true
    environment:
      APP_DEPENV: ${env:APP_DEPENV}
      APP_PROJNAME: ${env:APP_PROJNAME}
      APP_BRANCH: ${env:APP_BRANCH}
      APP_REVISION: ${env:APP_REVISION}
      APP_VERSION: ${env:APP_VERSION}
      APP_REMOTE_ORIGIN_URL: ${env:APP_REMOTE_ORIGIN_URL}
      STAGE: ${self:provider.stage}
      USER_TABLE:
        Ref: 'Users'
      EVENT_TABLE:
        Ref: 'Events'

resources:
  Resources:
    Users:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    Events:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: eventId
            AttributeType: S
        KeySchema:
          -
            AttributeName: eventId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
