---
service:
  name: fxa

package:
  individually: false
  exclude:
    - 'node_modules/*'
  include:
    - 'handler.py'
    - 'src/**'

custom:
  stage: ${opt:stage, self:provider.stage}
  usersTable: ${self:custom.stage}-users
  deletedUsersTable: ${self:custom.stage}-deletedUsers
  eventsTable: ${self:custom.stage}-events
  prefix: ${self:provider.stage}-${self:service.name}
  subdomain: ${self:provider.stage}.${self:service.name}
  pythonRequirements:
    dockerizePip: 'non-linux'
    fileName: "../../src/app_requirements.txt"
  packageExternal:
    external:
      - '../../src/sub'
      - '../../src/hub'
      - '../../src/shared'
      - '../../src'
  git-repo: https://github.com/mozilla/subhub
  dynamodb:
    # Permit serverless offline debugging against 
    # a local dynamodb instance via
    # sls dynamodb start -p 3000 &
    stages:
      - dev
    start:
      migrate: true
  customDomain:
    domainName: ${self:custom.subdomain}.mozilla-subhub.app
    certificateName: ${self:custom.subdomain}.mozilla-subhub.app
    basePath: 'v1'
    stage: ${self:provider.stage}
    createRoute53Record: true
    hostedZoneId: Z2KY0AWCLX3H6L
    endpointType: regional
  access:
    prod: restricted
    stage: restricted
    qa: restricted
    dev: unfettered
  resourcePolicies:
    unfettered:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*
    restricted:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/version
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/deployed
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/swagger.json
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/ui/*
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/support/*
        Condition:
          IpAddress:
            aws:SourceIp: ${file(whitelist.yml):support.${self:provider.stage}}
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/customer/*
          - execute-api:/*/*/plans
        Condition:
          IpAddress:
            aws:SourceIp: ${file(whitelist.yml):payments.${self:provider.stage}}
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/hub
        Condition:
          IpAddress:
            aws:SourceIp: ${file(whitelist.yml):hub}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-package-external
  - serverless-offline
provider:
  name: aws
  runtime: python3.7
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  stackName: ${self:custom.prefix}-stack
  apiName: ${self:custom.prefix}-apigw
  deploymentPrefix: ${self:custom.prefix}
  endpointType: regional
  logRetentionInDays: 90
  # NOTE: https://github.com/serverless/serverless/issues/6112
  logs:
    restApi: true
  memorySize: 512
  reservedConcurrency: 5
  timeout: 5
  tracing: true
  snsaccount: ${file(accounts.yml):fxa.${self:provider.stage}}
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  tags: ${file(resources/tags.yml):${self:custom.stage}, file(resources/tags.yml):default}
  stackTags:
    service: ${self:service}
  # Reference: https://serverless.com/blog/abcs-of-iam-permissions/  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:DescribeTable'
        - 'dynamodb:CreateTable'
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ Users, Arn ]
        - "Fn::GetAtt": [ Events, Arn ]
        - "Fn::GetAtt": [ DeletedUsers, Arn ]
    - Effect: Allow
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource:
        - 'Fn::Join': [':', ['arn:aws:secretsmanager', Ref: AWS::Region, Ref: AWS::AccountId, 'secret:${self:provider.stage}/*']]
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join': [':', ['arn:aws:logs', Ref: AWS::Region, Ref: AWS::AccountId, 'log-group:/aws/lambda/*:*:*']]
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource:
        - 'Fn::Join': [':', ['arn:aws:kms', Ref: AWS::Region, Ref: AWS::AccountId, 'alias/*']]
        - 'Fn::Join': [':', ['arn:aws:kms', Ref: AWS::Region, Ref: AWS::AccountId, 'key/*']]
    - Effect: Allow
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - 'Fn::Join': [':', ['arn:aws:sns', Ref: AWS::Region, Ref: AWS::AccountId, '${self:provider.stage}-fxa-event-data']]
  resourcePolicy: ${self:custom.resourcePolicies.${self:custom.access.${self:provider.stage}}}

functions:
  sub:
    name: ${self:custom.prefix}-sub
    description: >
      Function for handling subscription services interactions
    handler: subapp.handle
    timeout: 900
    events:
      - http: ANY /sub/{proxy+}
  hub:
    name: ${self:custom.prefix}-hub
    description: >
      Function for handling subscription services interactions
    handler: hubapp.handle
    timeout: 900
    events:
      - http: ANY /hub/{proxy+}
  mia:
    name: ${self:custom.prefix}-mia
    description: >
      Function for reconcilation of missing hub events
    handler: miaapp.handle
    timeout: 30
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # SNS
  - ${file(resources/sns-topic.yml)}