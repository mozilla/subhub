# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

[mypy]
# mypy configuration file
#   https://mypy.readthedocs.io/en/latest/config_file.html
#

#################################################
# Platform configuration
#################################################
# python_version
#   Defined in the .travis.yml as Python 3.7
python_version = 3.7

#################################################
# Import discovery
#################################################
# follow_imports
#   Third party code may not be necessarily compatible with mypy.
follow_imports = normal
# ignore_missing_imports
#   Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = True

#################################################
# Untyped definitions and calls
#################################################
# check_untyped_defs
#   Type-checks the interior of functions without type annotations.
check_untyped_defs = True
# disallow_untyped_calls
#   Disallows calling functions without type annotations from functions with type annotations.
disallow_untyped_calls = True
# disallow_untyped_defs
#   Disallows defining functions without type annotations or with incomplete type annotations.
disallow_untyped_defs = True

#################################################
# None and Optional handling
#################################################
# strict_optional
#   Enables or disables strict Optional checks. If False, mypy treats None as compatible with every type.
strict_optional = True

#################################################
# Configuring warnings
#################################################
# warn_no_return
#   Shows errors for missing return statements on some execution paths.
warn_no_return = True
# warn_redundant_casts
#   Warns about casting an expression to its inferred type.
warn_redundant_casts = True
# warn_unreachable
#   Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = True
# warn_unused_ignores
#   Warns about unneeded # type: ignore comments.
warn_unused_ignores = True

#################################################
# Miscellaneous strictness flags
#################################################
#
# allow_redefinition
#   Allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original definition.
allow_redefinition = False
